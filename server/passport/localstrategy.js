import { Strategy as PassportLocalStrategy } from 'passport-local';
import jwt from 'jsonwebtoken';

const User = require('mongoose').model('User');

// check if secret exists
if (!process.env.jwtSecret) {
  console.log('Error: jwtSecret is not set.  Run env.sh?');
  process.exit(1);
}

// NOTE: the Error constructor creates a new error object
// good for standardization
// creating new error to report incorrect credentials
const incorrectCredsErr = new Error('Incorrect email or password');
incorrectCredsErr.name = 'IncorrectCredentials';

module.exports = {
  localSignup: new PassportLocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    session: false, /* we are using tokens instead of sessions */
    passReqToCallback: true, /* we want to read username from body */
  }, (req, email, password, done) => {
    const newUser = new User({
      email: email.trim(),
      password: password.trim(),
      username: req.body.username.trim(),
    });

    newUser.save()
             .catch(err => done(err))
             .then(() => done(null));
  }),
  localLogin: new PassportLocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    session: false,
    passReqToCallback: true,
  }, (req, email, password, done) => User.findOne({ email: email.trim() }).exec()
          .catch(err => done(err))
          .then((user) => {
            if (!user) { return done(incorrectCredsErr); }

            return user.comparePassword(password.trim(), (passwordErr, isMatch) => {
              if (passwordErr) { return done(passwordErr); }

              if (!isMatch) { return done(incorrectCredsErr); }
              // NOTE JSON web token structure:
              //    encodedHeader.encodedPayload.encodedSignature
              //    header includes algorithm and token Type

              // NOTE on terminology: payloads contain claims, here about user
              //  sub stands for subject and is a registered (recommended) claim
              //  according to JWT standardsthe subject value should be unique,
              //      so we use the users id generated by mongoDB
              const payload = { sub: user._id };

              const token = jwt.sign(payload, process.env.jwtSecret);

              const data = { username: user.username };

              return done(null, token, data);
            });
          })),
};
